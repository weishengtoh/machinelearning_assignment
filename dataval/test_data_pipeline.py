'''
Define the pipeline component that is used to validate the cleaned data.

This pipeline component uses the clean data artifact generated by the preprocess_pipeline
component. The clean data artifact student-maths-clean.csv is retrieved from Weights & Biases.

This pipeline component does not generate any artifacts, but will instead force
the program to fail when the data does not meet the expectations defined.

This pipeline component is meant to be chained to the next pipeline component
segregate_pipeline, which will segregate the data for training.
'''

import pandas as pd


def test_data_range(data):

    nominal_range = {
        'school': ['GP', 'MS'],
        'sex': ['F', 'M'],
        'address': ['U', 'R'],
        'fam_size': ['GT3', 'LE3'],
        'parents_cohabit': ['T', 'A'],
        'mother_job': ['other', 'services', 'at_home', 'teacher', 'health'],
        'father_job': ['other', 'services', 'at_home', 'teacher', 'health'],
        'reason_for_school': ['course', 'reputation', 'home', 'other'],
        'guardian': ['mother', 'father', 'other'],
        'extra_edu_support': ['yes', 'no'],
        'fam_edu_support': ['yes', 'no'],
        'extra_paid_classes': ['yes', 'no'],
        'extra_curri': ['yes', 'no'],
        'att_nursery': ['yes', 'no'],
        'wants_higheredu': ['yes', 'no'],
        'internet_access': ['yes', 'no'],
        'in_romantic': ['yes', 'no']
    }

    numerical_range = {
        'age': range(10, 31),
        'num_school_absences': range(0, 76)
    }

    ordinal_range = {
        'mother_edu': range(0, 5),
        'father_edu': range(0, 5),
        'travel_time': range(1, 5),
        'weekly_studytime': range(1, 5),
        'past_classfailures': range(0, 4),
        'famrelation_quality': range(1, 6),
        'afterschool_time': range(1, 6),
        'friend_time': range(1, 6),
        'alc_consump_workday': range(1, 6),
        'alc_consump_weekend': range(1, 6),
        'health_status': range(1, 6)
    }

    target_range = {
        'first_grade': range(0, 21),
        'second_grade': range(0, 21),
        'third_grade': [0, 1]
    }

    columns_valid_range = {
        **nominal_range,
        **numerical_range,
        **ordinal_range,
        **target_range
    }

    for col_name, val_range in columns_valid_range.items():
        value_inrange = data[col_name].isin(val_range)
        assert value_inrange.all()


def test_data_schema(data):

    nominal_type = {
        'school', 'sex', 'address', 'fam_size', 'parents_cohabit', 'mother_job',
        'father_job', 'reason_for_school', 'guardian', 'extra_edu_support',
        'fam_edu_support', 'extra_paid_classes', 'extra_curri', 'att_nursery',
        'wants_higheredu', 'internet_access', 'in_romantic'
    }

    numerical_type = ['age', 'num_school_absences']

    ordinal_type = [
        'mother_edu', 'father_edu', 'travel_time', 'weekly_studytime',
        'past_classfailures', 'famrelation_quality', 'afterschool_time',
        'friend_time', 'alc_consump_workday', 'alc_consump_weekend',
        'health_status'
    ]

    target_type = ['second_grade', 'first_grade', 'third_grade']

    for col in [*numerical_type, *ordinal_type, *target_type]:
        assert pd.api.types.is_integer_dtype(data[col])

    for col in nominal_type:
        assert pd.api.types.is_string_dtype(data[col])


def test_no_duplicates(data):

    assert not data.duplicated().all()


# Will not do data validation for missing data
# To perform imputation for missing data within sklearn pipeline instead
# def test_no_missing(data):
#     '''
#     Check no missing data
#     '''
#     assert data.notnull().all().all()
